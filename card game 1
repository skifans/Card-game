#this code is designed to be used in python 3.2 with the pygame addon.
import pygame, time, sys, ctypes, os
from pygame.locals import *
import random

#set size of window
WINDOWWIDTH = 800
WINDOWHEIGHT = 800

#set colours
#             R    G    B
BLACK     = (  0,   0,   0)
DARKPINK  = (255,  20, 147)
GREEN     = (  0, 255,   0)
WHITE     = (255, 255, 255)
DARKGREEN = (  0, 155,   0)
GREY      = (211, 211, 211)
RED       = (255,   0,   0)
BGCOLOR = WHITE

#set up display
pygame.display.init()
global wn, BASICFONT
pygame.init()
wn = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT)) #set the width of the window
BASICFONT = pygame.font.SysFont('ActionIsShaded', 24) #set font to be used
pygame.display.set_caption('Card Fighter')
screen=pygame.display.set_mode((0,0))
mainDeck = []

def cont(blank):
    global contvar, action
    contvar=0
    return contvar

def terminate(blank):
    #code which closes the windows after the game is over
    #time.sleep(2)
    pygame.quit()
    sys.exit()

def drawGrid(blank):
    global vertline
    for x in range(0, WINDOWWIDTH, CELLSIZE): # draw vertical lines inbetween cells.
        pygame.draw.line(wn, WHITE, (x, 0), (x, WINDOWHEIGHT))
    for y in range(0, WINDOWHEIGHT, CELLSIZE): # draw horizontal lines inbetween cells.
        vertline = pygame.draw.line(wn, WHITE, (0, y), (WINDOWWIDTH, y))
    pygame.display.update()

#draws grid after key press
wn.fill(BGCOLOR)

#-----------------------------------------------------------------------------------------------------------------------------------------------
#funtion to display text/buttons
def text_objects(text, font, colour):
    textSurface = font.render(text, True, colour) #extact purpose unkown but seems to be needed
    return textSurface, textSurface.get_rect()

def message_display(text, x, y, font_size, colour):
    largeText = pygame.font.Font('freesansbold.ttf',font_size) #load font
    TextSurf, TextRect = text_objects(text, largeText, colour) #render text
    TextRect.center = ((x),(y)) #place text
    #screen=pygame.display.set_mode((0,0)) uncomenting this lets fixes the screen not defined bug - but also causes problems displaying text if let uncommented.
    screen.blit(TextSurf, TextRect) #send to screen, needs to be updated/fliped to be worked

#function for buttoms
#example syntax to call button("return",150,450,100,50,DARKGREEN,GREEN,BLACK,action,"") note the lack of brackets on action function. For no argument use "", otherwise type it.
def txt_button(msg,x,y,w,h,inactive_colour,active_colour,text_colour,name_of_function_to_call_when_clicked, argument):
    #need pygame.flip/update outside of function
    click = pygame.mouse.get_pressed() #get mouse state (clicked/not clicked)
    mouse = pygame.mouse.get_pos() #get mouse coords
    if x+w > mouse[0] > x and y+h > mouse[1] > y: #check if mouse is on button
        pygame.draw.rect(screen, active_colour,(x,y,w,h)) #change to active colour
        if click[0] == 1: #check click (above if checks mouse is on button)
            if name_of_function_to_call_when_clicked!="null":
                name_of_function_to_call_when_clicked(argument) #do this when clicked (veriable needs not to have brackets)
    else:
        pygame.draw.rect(screen, inactive_colour,(x,y,w,h)) #mouse not on button, switch to inactive colour

    smallText = pygame.font.SysFont("freesansbold.ttf", 30) #load font
    textSurf, textRect = text_objects(msg, smallText,text_colour) #place text in button through text funtion
    textRect.center = ( (x+(w/2)), (y+(h/2)) ) #location of text
    screen.blit(textSurf, textRect) #send to screen (but not update)

def img_button(x,y,w,h,name_of_function_to_call_when_clicked,filename,argument):
    #need pygame.flip/update outside of function
    click = pygame.mouse.get_pressed() #get mouse state (clicked/not clicked)
    mouse = pygame.mouse.get_pos() #get mouse coords
    image = pygame.image.load(os.path.join("cards",filename))
    screen.blit(image, (x,y)) #the location of the image
    if x+w > mouse[0] > x and y+h > mouse[1] > y: #check if mouse is on button
        print("on card "+str(filename))
        if click[0] == 1: #check click (above if checks mouse is on button)
            name_of_function_to_call_when_clicked(argument) #do this when clicked (veriable needs not to have brackets)

def set_cards(blank): #set up the cards function
    global card_list
    # Order for Arrays: Type, Attack,defence, Duribility, mana cost, name, effect or not

    #Smith:
    Broken_sword = [0,1,4,1,"Broken sword",0]
    Glass_blade = [0,5,1,3,"Glass Blade",0]
    Smithing_hammer = [0,1,5,4, "Smithing Hammer",1]
    Large_hammer = [0,6,4,6, "Large Hammer",0]

    Gloves = [1,2,2,2,"Gloves",0]
    Smithing_hands = [1,2,3,3,"Smith's Hands",1]
    Forge_gloves = [1,1,4,6,"Forge Gloves",1]

    Leg_brace = [2,2,2,2,"Leg brace",0]
    Smiths_leg_guard = [2,3,4,3,"Smith's Leg guard",0]
    Peg_leg = [2,1,4,4,"Peg Leg",1]

    Face_mask =[3,2,2,2,"Face Mask",0]
    Goggles = [3,0,5,3,"Goggles",1]
    Forge_guard = [3,4,5,4,"Forge Guard",0]

    Smiths_apron = [4,2,2,2,"Smith's Apron",0]
    Anvil = [4,3,3,"Anvil",1]
    Forged_armour = [4,5,5,5,"Forged Armour",0]


    #Paladin

    Hammer_of_dawn = [0,2,3,1,"Hammer of Dawn",0]
    Lance = [0,2,5,3,"Lance",0]
    Holy_blade = [0,2,6,4,"Holy Blade",1]
    Blessed_lance = [0,7,4,6,"Blessed Lance",1]

    Steel_gauntlets = [1,1,3,2,"steel Gauntlets",0]
    Valkyrie_gloves =  [1,3,3,3,"Valkyrie Gloves",1]
    GigaSteel_gauntlets = [1,4,6,5,"GigaSteel Gauntlets",0]

    Steel_greaves = [2,3,2,2, "Steel Greaves",0]
    Valkyrie_sandles = [2,3,3,3,"Valkyrie Sandles",0]
    GigaSteel_greaves = [2,4,6,5,"GigaSteel Greaves",0]

    Steel_helm= [3,3,2,2,"Steel Helm",0]
    Valkyrie_helm = [3,3,3,3,"Valkyrie helm",1]
    GigaSteel_helm = [3,4,6,5, "GigaSteel Helm",1]

    Steel_mail = [4,3,2,2,"Steel Mail",0]
    Valkyrie_armour = [4,4,3,4,"Valkyrie Armour",0]
    GigaSteel_platemail = [4,4,6,5, "Gigasteel Plate-mail",0]

    #Man at arms

    Mace = [0,5,1,2, "Mace",0]
    Heavy_hammer = [0,6,2,4, "Heavy hammer",0]
    Claymore = [0,8,2,6,"Claymore",0]
    Reckless_sword = [0,10,1,8, "Reckless_sword",0]

    Bandages =[1,3,1,2,"Bandages",0]
    Hand_guard = [1,2,4,4,"Hand Guard"]
    Spiked_shield = [1,4,4,6,"Spiked Shield",1]

    Boots = [2,3,1,2,"Boots",0]
    Kilt = [2,2,4,4,"Kilt",0]
    Swift_boots = [2,4,3,6,"Swift Boots",1]

    Eye_patch = [3,3,1,2,"Eye patch",0]
    Steel_mask = [3,2,4,4, "Steel Mask",0]
    Conqurers_helm = [3,4,5,6,"Conqurers Helm",0]

    Blood_stained_wraps = [4,3,1,2,"Blood Stained wraps",0]
    Woad = [4,2,4,4,"Woad",0]
    Conqurers_armour = [4,4,5,6,"Conqurers armour",0]

    #General

    Standard_sword=[0,2,3,2,"Standard sword",0]
    Buckler = [0,0,4,2,"Buckler",0]



    Leather_gloves	=[1,1,2,1,"Leather gloves",0]
    Iron_gauntlents	=[1,3,5,4,"Iron gauntlents",0]


    Leather_greeves = [2,3,3,3,"Leather greeves",0]
    Iron_greeves = [2,3,5,4, "Iron greeves",0]


    Heros_cap = [3,1,3,1,"Hero's cap",0]
    Heros_helm = [3,3,3,3,"Hero's helm",0]


    Iron_armour = [4,3,5,4,"Iron armour",0]
    Steel_armour = [4,3,6,5,"Steel armour",0]

# a two dimensional array 0 = standard 1 = smith 2 = paladin 3 = Man at arms
    card_list = [[Standard_sword,Leather_gloves,Iron_gauntlents,Leather_greeves,Iron_greeves,Heros_cap,Heros_helm,Iron_armour,Steel_armour],[Broken_sword,Glass_blade,Smithing_hammer,Large_hammer,Gloves,Smithing_hands,Forge_gloves,Leg_brace,Smiths_leg_guard,Peg_leg,Face_mask,Goggles,Forge_guard,Smiths_apron,Anvil,Forged_armour],[Hammer_of_dawn,Lance,Holy_blade,Blessed_lance,Steel_gauntlets,Valkyrie_gloves,GigaSteel_gauntlets,Steel_greaves,Valkyrie_sandles,GigaSteel_greaves,Steel_helm,Valkyrie_helm,GigaSteel_helm,Steel_mail,Valkyrie_armour,GigaSteel_platemail],[Mace,Heavy_hammer,Claymore,Reckless_sword,Bandages,Hand_guard,Spiked_shield,Boots,Kilt,Swift_boots,Eye_patch,Steel_mask,Conqurers_helm,Blood_stained_wraps,Woad,Conqurers_armour]] #list of all card names

def menuFunction(blank):
    global menu
    wn.fill(BGCOLOR)
    menu=1 #loop reacuent
    while menu==1:
        for event in pygame.event.get():
            txt_button("Single player",150,50,200,50,GREEN,DARKGREEN,BLACK,single, "") #make singplayer button
            txt_button("Muilti player",450,50,200,50,GREEN,DARKGREEN,BLACK,muilti, "") #make muiltiplayer button
            txt_button("Close",300,150,200,50,GREEN,DARKGREEN,BLACK,terminate, "") #make close button
            txt_button("Deck Builder", 300,250,200, 50,GREEN,DARKGREEN,BLACK, deckBuilderScreen, "") #make deck Builder screen button
            txt_button("Keyboard test", 300, 350, 200, 50, GREEN, DARKGREEN, BLACK, keyboard_example, "")
            pygame.display.flip() #update pygame
        time.sleep(0.1)

def single(blank): #single player function
    global menu
    menu=0
    turn_1()

def keyboard_example(blank):
    b=keyboard(1, 2, "test input") #1=< charectors needed, 2=letters and numbers
    print(b)

def addletter(letter):
    global string
    string=string+letter #adds letter from argument to all the others
    print(string)
    pass

def keyboard(minlength, InputOn1, message):
    global string, InputOn
    InputOn=InputOn1
    string=""
    while InputOn!=0:
        for event in pygame.event.get():
            wn.fill(BGCOLOR)
            message_display(string,400.5,150,16,BLACK)
            message_display(message,400,100,16,BLACK)
            if event.type==KEYDOWN:
                key = pygame.key.get_pressed() #get key pressed
                if key[pygame.K_a]:
                    addletter("A")
                elif key[pygame.K_b]:
                    addletter("B")
                elif key[pygame.K_c]:
                    addletter("C")
                elif key[pygame.K_d]:
                    addletter("D")
                elif key[pygame.K_e]:
                    addletter("E")
                elif key[pygame.K_f]:
                    addletter("F")
                elif key[pygame.K_g]:
                    addletter("G")
                elif key[pygame.K_h]:
                    addletter("H")
                elif key[pygame.K_i]:
                    addletter("I")
                elif key[pygame.K_j]:
                    addletter("J")
                elif key[pygame.K_k]:
                    addletter("K")
                elif key[pygame.K_l]:
                    addletter("L")
                elif key[pygame.K_m]:
                    addletter("M")
                elif key[pygame.K_n]:
                    addletter("N")
                elif key[pygame.K_o]:
                    addletter("O")
                elif key[pygame.K_p]:
                    addletter("P")
                elif key[pygame.K_q]:
                    addletter("Q")
                elif key[pygame.K_r]:
                    addletter("R")
                elif key[pygame.K_s]:
                    addletter("S")
                elif key[pygame.K_t]:
                    addletter("T")
                elif key[pygame.K_u]:
                    addletter("U")
                elif key[pygame.K_v]:
                    addletter("V")
                elif key[pygame.K_w]:
                    addletter("W")
                elif key[pygame.K_x]:
                    addletter("X")
                elif key[pygame.K_y]:
                    addletter("Y")
                elif key[pygame.K_z]:
                    addletter("Z")
                elif key[pygame.K_CLEAR]:
                    if len(string)>0: #make sure there is something to clear/delete from/send off
                        clear()
                elif key[pygame.K_BACKSPACE]:
                    if len(string)>0:
                        backspace()
                elif key[pygame.K_RETURN]:
                    if len(string)>0:
                        closeinput(string)

                if InputOn==2:
                    if key[pygame.K_0]:
                        addletter("0")
                    elif key[pygame.K_1]:
                        addletter("1")
                    elif key[pygame.K_2]:
                        addletter("2")
                    elif key[pygame.K_3]:
                        addletter("3")
                    elif key[pygame.K_4]:
                        addletter("4")
                    elif key[pygame.K_5]:
                        addletter("5")
                    elif key[pygame.K_6]:
                        addletter("6")
                    elif key[pygame.K_7]:
                        addletter("7")
                    elif key[pygame.K_8]:
                        addletter("8")
                    elif key[pygame.K_9]:
                        addletter("9")
            else:
                txt_button('A',213.5,200,30,30,WHITE,GREY,BLACK,addletter, "A") #have a button with a letter, which calls a function with the argument of that letter.
                txt_button('B',244.5,200,30,30,WHITE,GREY,BLACK,addletter, "B")
                txt_button('C',275.5,200,30,30,WHITE,GREY,BLACK,addletter, "C")
                txt_button('D',306.5,200,30,30,WHITE,GREY,BLACK,addletter, "D")
                txt_button('E',337.5,200,30,30,WHITE,GREY,BLACK,addletter, "E")
                txt_button('F',368.5,200,30,30,WHITE,GREY,BLACK,addletter, "F")
                txt_button('G',399.5,200,30,30,WHITE,GREY,BLACK,addletter, "G")
                txt_button('H',430.5,200,30,30,WHITE,GREY,BLACK,addletter, "H")
                txt_button('I',461.5,200,30,30,WHITE,GREY,BLACK,addletter, "I")
                txt_button('J',492.5,200,30,30,WHITE,GREY,BLACK,addletter, "J")
                txt_button('K',523.5,200,30,30,WHITE,GREY,BLACK,addletter, "K")
                txt_button('L',554.5,200,30,30,WHITE,GREY,BLACK,addletter, "L")
                txt_button('M',585.5,200,30,30,WHITE,GREY,BLACK,addletter, "M")

                txt_button('N',213.5,230,30,30,WHITE,GREY,BLACK,addletter, "N")
                txt_button('O',244.5,230,30,30,WHITE,GREY,BLACK,addletter, "O")
                txt_button('P',275.5,230,30,30,WHITE,GREY,BLACK,addletter, "P")
                txt_button('Q',306.5,230,30,30,WHITE,GREY,BLACK,addletter, "Q")
                txt_button('R',337.5,230,30,30,WHITE,GREY,BLACK,addletter, "R")
                txt_button('S',368.5,230,30,30,WHITE,GREY,BLACK,addletter, "S")
                txt_button('T',399.5,230,30,30,WHITE,GREY,BLACK,addletter, "T")
                txt_button('U',430.5,230,30,30,WHITE,GREY,BLACK,addletter, "U")
                txt_button('V',461.5,230,30,30,WHITE,GREY,BLACK,addletter, "V")
                txt_button('W',492.5,230,30,30,WHITE,GREY,BLACK,addletter, "W")
                txt_button('X',523.5,230,30,30,WHITE,GREY,BLACK,addletter, "X")
                txt_button('Y',554.5,230,30,30,WHITE,GREY,BLACK,addletter, "Y")
                txt_button('Z',585.5,230,30,30,WHITE,GREY,BLACK,addletter, "Z")
                if len(string)>minlength-1: #make sure that at least one letter has been entered (0 letters was also causing a crash)
                    txt_button('Finished',213.5,260,402,30,WHITE,GREY,BLACK,closeinput, string) #calls close input function
                else:
                    message_display("You need to enter "+str(minlength)+" or more charectors",399.5,275,16,BLACK)
                if len(string)>0:
                    txt_button('Clear',213.5,320,201,30,WHITE,GREY,BLACK,clear, "")
                    txt_button('Backspace',404.5,320,201,30,WHITE,GREY,BLACK,backspace, "")


                if InputOn==2:
                    txt_button('0',213.5,170,30,30,WHITE,GREY,BLACK,addletter, "0") #have a button with a letter, which calls a function with the argument of that letter.
                    txt_button('1',244.5,170,30,30,WHITE,GREY,BLACK,addletter, "1")
                    txt_button('2',275.5,170,30,30,WHITE,GREY,BLACK,addletter, "2")
                    txt_button('3',306.5,170,30,30,WHITE,GREY,BLACK,addletter, "3")
                    txt_button('4',337.5,170,30,30,WHITE,GREY,BLACK,addletter, "4")
                    txt_button('5',368.5,170,30,30,WHITE,GREY,BLACK,addletter, "5")
                    txt_button('6',399.5,170,30,30,WHITE,GREY,BLACK,addletter, "6")
                    txt_button('7',430.5,170,30,30,WHITE,GREY,BLACK,addletter, "7")
                    txt_button('8',461.5,170,30,30,WHITE,GREY,BLACK,addletter, "8")
                    txt_button('9',492.5,170,30,30,WHITE,GREY,BLACK,addletter, "9")
                pygame.display.flip()
    wn.fill(BGCOLOR)
    pygame.display.flip()
    return string

def clear(blank):
    global string
    string=""

def backspace(blank):
    global string
    string=string[:-1]

def closeinput(string):
    global InputOn
    InputOn=0 #loop controlling buttons will not run
    pass

def muilti(blank): #muiltiplayer function
    global menu, wn
    menu = 0
    wn.fill(BGCOLOR)
    pygame.display.flip()

    def set_player_1(blank):
        global turn_1, health_1, amour_base_1, amour_mod_1, weapon_1, name_1, deck_1, hand_1
        turn_1 = 0
        health_1 = 20
                      #[head,chest,arms,legs]
        amour_base_1 = [1   ,2    ,1   ,1   ]
                     #[head  ,chest ,arms  ,legs  ]
        amour_mod_1 = [[0,''],[0,''],[0,''],[0,'']]
        weapon_1 = [None, 0, 'A']
        name_1 = keyboard(0, 2, "Name of palyer 1")

        deck_1 = []
        classPicker("multi")
        cards = []
        cards.append(card_list[0])
        cards.append(card_list[int(class1)])
        wn.fill(WHITE)
        pygame.display.flip()
        for i in range(20): #20 card deck
            card = random.choice(card_list) #get random card from cardlist
            card = random.choice(card)
            deck_1.append(card)
            print(deck_1) #add that card to there deck
        hand_1 = []
        for i in range(5): #5 card hand
            card = random.choice(deck_1) #get random card from deck
            deck_1.remove(card) #remove this card from deck
            hand_1.append(card) #add this card to hand
        card = None

    def set_player_2(blank):
        global turn_2, health_2, amour_base_2, amour_mod_2, weapon_2, name_2, deck_2, hand_2
        turn_2 = 0
        health_2 = 20
                      #[head,chest,arms,legs]
        amour_base_2 = [1   ,2    ,1   ,1   ]
                     #[head  ,chest ,arms  ,legs  ]
        amour_mod_2 = [[0,''],[0,''],[0,''],[0,'']]
        weapon_2 = [None, 0, 'A']
        name_2 = keyboard(0, 2, "Name of palyer 2")

        deck_2 = []
        classPicker("multi")
        cards = []
        cards.append(card_list[0])
        cards.append(card_list[int(class1)])
        wn.fill(WHITE)
        pygame.display.flip()
        for i in range(20): #20 card deck
            card = random.choice(card_list) #get random card from cardlist
            card = random.choice(card)
            deck_2.append(card)
            print(deck_2) #add that card to there deck
        hand_2 = []
        for i in range(5): #5 card hand
            card = random.choice(deck_2) #get random card from deck
            deck_2.remove(card) #remove this card from deck
            hand_2.append(card) #add this card to hand
        card = None

    def end(blank):
        global turn, contvar
        contvar = 0
        turn = False
        return turn, contvar

    def play_multi(blank):
        set_player_1('')
        set_player_2('')

        def player_1_turn(blank):
            global turnstart
            turnstart = False
            wn.fill(BGCOLOR)
            message_display('test', 400, 400, 20, BLACK)
            pygame.display.flip()

        wn.fill(BGCOLOR)
        pygame.display.flip()
        global turnstart
        turnstart = True
        while turnstart:
            for event in pygame.event.get():
                txt_button("Click for Player 1's turn", 200, 200, 250, 50, WHITE, GREY, BLACK, player_1_turn,"")
                pygame.display.flip()
            time.sleep(0.1)

    play_multi('')

##def turn_1():
##    global wn, turn
##    wn.fill(BGCOLOR)
##    pygame.display.flip()
##    ctypes.windll.user32.MessageBoxW(0, "Player 1, take turn?", "Continue", 0)
##    hand1=[1,2,3,4]
##    turn=1
##    while turn==1:
##        for event in pygame.event.get():
##            for i in range (len(hand1)):
##                txt_button("Close",300,100,200,50,GREEN,DARKGREEN,BLACK,terminate,"")
##                img_button((i*150)+100,600,150,200,terminate,str(i+1)+".jpg",1)
##        pygame.display.flip()
##        time.sleep(0.2)

def whenClicked(blank):
    return "clicked"

#Deck Builder Check Run Code:
set_cards("")

def deckBuilderScreen(blank):
    global deckBuilder
    wn.fill(BGCOLOR)
    deckBuilder = True
    while deckBuilder == True:
        for event in pygame.event.get():
            txt_button("Return", 200, 200, 75, 75, GREEN, DARKGREEN, BLACK, menuFunction, "")
            txt_button("Exit", 600, 200, 75, 75, GREEN, DARKGREEN, BLACK, terminate, "")
            txt_button("Single Player Deck", 200, 400, 200, 75, GREEN, DARKGREEN, BLACK, classPicker, "single")
            txt_button("Multi Player Deck", 480, 400, 200, 75, GREEN, DARKGREEN, BLACK, classPicker, "multi")
            pygame.display.flip()

def classPicker(mode):
    global menu
    menu = True
    while menu == True:
        for event in pygame.event.get():
            wn.fill(DARKPINK)
            txt_button("Return", 200, 200, 75, 75, GREEN, DARKGREEN, BLACK, menuFunction, "")
            txt_button("Exit", 600, 200, 75, 75, GREEN, DARKGREEN, BLACK, terminate, "")
            #Class Picking
            message_display("First Pick Your Class. This will allow you to use cards with a more specific set of skills", 450, 150, 20, GREEN)
            txt_button("Palladin", 200, 400, 150, 100, GREEN, DARKGREEN, BLACK, cardPicker, [mode, "palladin"])
            txt_button("Barbarian", 400, 400, 150, 100, GREEN, DARKGREEN, BLACK, cardPicker, [mode, "barbarian"])
            txt_button("Smith", 600, 400, 150, 100, GREEN, DARKGREEN, BLACK, cardPicker, [mode, "smith"])
        pygame.display.flip()

def displayCard(card,cardKey, deck):
        #Set up template so that position, description etc. can be easily modified no matter the card
    #[X, Y, WIDTH, HEIGHT]
    cardAttributes = ["Attack:", "Defence:", "Durability:", "Mana Cost:", "Name:", "Effect or not:"]
    cardOneTemplate = [300, 400, 150, 200]
    img_button(cardOneTemplate[0], cardOneTemplate[1], cardOneTemplate[2], cardOneTemplate[3], cardSelect, card, card)
        #Description Layout
    cardAttributeY = cardOneTemplate[1] + 250
    attributeY = cardOneTemplate[1] + 250
    for i in (cardAttributes):
        message_display(i, cardOneTemplate[0], attributeY, 20, BLACK)
        attributeY += 20
    for i in range(0,(len(cardAttributes))):
        message_display(str(card_list[cardKey][1][i]), cardOneTemplate[0]+150, cardAttributeY,20, GREEN)
        cardAttributeY += 20

def cardPicker(array):
    global menu
    menu = False
    cardPicker = True
    while cardPicker == True:
        for event in pygame.event.get():
            wn.fill(DARKPINK)
            txt_button("Return", 200, 200, 75, 75, GREEN, DARKGREEN, BLACK, classPicker, "single")
            txt_button("Exit", 600, 200, 75, 75, GREEN, DARKGREEN, BLACK, terminate, "")
            #Class Picking
            message_display("Pick your cards from classes below: 20 Cards in Total", 450, 150, 20, GREEN)
            if array[0] == "single":
                if array[1] == "palladin":
                    displayCard("1.jpg", 0, mainDeck)
                    pygame.display.flip()
                elif array[1] == "barbarian":
                    displayCard("2.jpg", 1, mainDeck)
                    pygame.display.flip()
                elif array[1] == "smith":
                    displayCard("3.jpg", 2, mainDeck)
                    pygame.display.flip()
            elif array[0] == "multi":
                global class1
                if array[1] == "palladin":
                    class1 = 2
                    cardPicker=False
                elif array[1] == "barbarian":
                    class1 = 3
                    cardPicker=False
                elif array[1] == "smith":
                    class1 = 1
                    cardPicker=False


def mainDeckMulti(blank):
    pass

def cardSelect(card):
    if checkDeck(mainDeck) == True:
        mainDeck.append(card)
    else:
        message_display("WARNING DECK ALREADY AT MAX CAPACITY", 400, 450, 30, RED)
    print(mainDeck)
    return(mainDeck)
"""NOTE DECK SIZE AT 10 FOR TESTING PURPOSES ONLY"""
def checkDeck(deck):
    cardCount=0
    for i in deck:
        cardCount+=1
    if cardCount>= 10:
        return False
    else:
        return True

def deckLoader(adeck):
    if adeck == "mainDeck":
        print("if")
        for line in decks:
            print("I")
            if "singlePlayerDeck" in line:
                tempDeck = []
                count = 0
                print("if2")
                for i in line:
                    if isinstance(i, int) == True:
                        while count < 5:
                            tempDeck.append(i)
                            count += 1
                    else:
                        break
                adeck += str(tempDeck)
                print(tempDeck)
                print("Appended")
    print(adeck)
    return adeck

menuFunction("")
#terminate("")
